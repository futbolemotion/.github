name: üîÑ Create PR pre_prod to main

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: "Selecciona el repositorio para crear PR (pre_prod ‚Üí main)"
        required: true
        type: choice
        options:
          - zend-library
          - zend-src
          - basket-zend-src
          - running-zend-src
          - front-land-bundle
          - back-land-bundle
          - atland
          - atland-vendor
          - superadmin
          # Agrega los repos de la organizaci√≥n aqu√≠

jobs:
  create-pr-job:
    name: Create PR pre_prod ‚Üí main
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Set variables
        id: vars
        run: |
          # Construye el nombre completo del repositorio usando el owner del contexto
          echo "FULL_REPO_NAME=${{ github.repository_owner }}/${{ github.event.inputs.repository_name }}" >> $GITHUB_ENV
          echo "REPO_SHORT_NAME=${{ github.event.inputs.repository_name }}" >> $GITHUB_ENV
          echo "PR_BRANCH=temp-preprod-to-main/$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.FULL_REPO_NAME }}
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          fetch-depth: 0 # Necesario para comparar ramas completas

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if branches exist
        run: |
          MAIN_EXISTS=$(git ls-remote --heads origin main | wc -l)
          PREPROD_EXISTS=$(git ls-remote --heads origin pre_prod | wc -l)
          
          if [ "$MAIN_EXISTS" -eq 0 ]; then
            echo "‚ùå La rama 'main' no existe en el repositorio $REPO_SHORT_NAME. Saliendo."
            exit 1
          fi
          
          if [ "$PREPROD_EXISTS" -eq 0 ]; then
            echo "‚ùå La rama 'pre_prod' no existe en el repositorio $REPO_SHORT_NAME. Saliendo."
            exit 1
          fi
          
          echo "‚úÖ Ambas ramas existen en el repositorio $REPO_SHORT_NAME."

      - name: Check for differences and prepare branch
        id: check_diff
        run: |
          # Fetch all refs to ensure up-to-date local knowledge of remote branches
          git fetch origin
          
          # Check if pre_prod is ahead of main
          if [ -z "$(git log origin/main..origin/pre_prod --oneline)" ]; then
            echo "AHEAD_EXISTS=false" >> $GITHUB_ENV
            echo "‚ÑπÔ∏è La rama 'pre_prod' no tiene commits por delante de 'main'. No se necesita crear PR."
          else
            echo "AHEAD_EXISTS=true" >> $GITHUB_ENV
            # Create and push the temporary branch from pre_prod
            # Asegurarse de estar en la rama correcta antes de crear la temporal
            git checkout origin/pre_prod
            git branch ${{ env.PR_BRANCH }}
            git push origin ${{ env.PR_BRANCH }}
            echo "‚úÖ 'pre_prod' tiene commits por delante de 'main'. Creando PR..."
          fi

      - name: Create pull request
        if: env.AHEAD_EXISTS == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          base: main
          branch: ${{ env.PR_BRANCH }}
          delete-branch: false
          title: "üîÑ Merge pre_prod into main"
          body: |
            ## üìã Descripci√≥n
            Pull Request autom√°tico para mergear cambios de la rama `pre_prod` a `main`.
            
            ## üîÑ Cambios incluidos
            Este PR incluye todos los cambios que est√°n en `pre_prod` y no est√°n en `main`.
            
            ## ‚úÖ Checklist
            - [ ] Revisar los cambios incluidos
            - [ ] Verificar que no hay conflictos
            - [ ] Aprobar el merge si todo est√° correcto
            
            ---
            *PR generado autom√°ticamente por GitHub Actions*
          reviewers: ${{ github.actor }} # Asigna al usuario que dispara el workflow
          labels: |
            automated-pr
            pre-prod-to-main
            merge

      - name: Show PR information
        if: env.AHEAD_EXISTS == 'true' && steps.create-pr.outputs.pull-request-number
        run: |
          echo "‚úÖ Pull Request creado exitosamente!"
          echo "N√∫mero de PR: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "URL del PR: ${{ steps.create-pr.outputs.pull-request-url }}"

      - name: No changes needed
        if: env.AHEAD_EXISTS == 'false'
        run: |
          echo "‚ÑπÔ∏è 'pre_prod' no tiene commits por delante de 'main'. No se necesita crear PR."
          echo "‚úÖ El repositorio ${{ env.FULL_REPO_NAME }} est√° actualizado (main est√° al d√≠a con pre_prod o viceversa)."