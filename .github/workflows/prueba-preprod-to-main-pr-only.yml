name: üîÑ Create PR pre_prod to main

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: "Selecciona el repositorio para crear PR (pre_prod ‚Üí main)"
        required: true
        type: choice
        options:
          - zend-library
          - zend-src
          - basket-zend-src
          - running-zend-src
          - front-land-bundle
          - back-land-bundle
          - atland
          - atland-vendor
          - superadmin
          # Agrega los repos de la organizaci√≥n aqu√≠

jobs:
  create-pr-job:
    name: Create PR pre_prod ‚Üí main
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Set variables
        id: vars
        run: |
          echo "REPO_NAME=${{ github.event.inputs.repositories }}" >> $GITHUB_ENV
          echo "CLONE_URL=https://x-access-token:${{ secrets.ORG_REPO_UPDATE_PAT }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}.git" >> $GITHUB_ENV
          echo "PR_BRANCH=temp-preprod-to-main/$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ github.event.inputs.repositories }}
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          ref: main
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if branches exist
        run: |
          MAIN_EXISTS=$(git ls-remote --heads origin main | wc -l)
          PREPROD_EXISTS=$(git ls-remote --heads origin pre_prod | wc -l)
          
          if [ "$MAIN_EXISTS" -eq 0 ]; then
            echo "‚ùå La rama 'main' no existe en el repositorio $REPO_NAME. Saliendo."
            exit 1
          fi
          
          if [ "$PREPROD_EXISTS" -eq 0 ]; then
            echo "‚ùå La rama 'pre_prod' no existe en el repositorio $REPO_NAME. Saliendo."
            exit 1
          fi
          
          echo "‚úÖ Ambas ramas existen en el repositorio $REPO_NAME."

      - name: Fetch pre_prod and create temp branch
        run: |
          # Fetch pre_prod branch
          git fetch origin pre_prod:refs/remotes/origin/pre_prod
          
          # Create and checkout new temp branch from pre_prod
          git checkout -b ${{ env.PR_BRANCH }} origin/pre_prod
          
          # Check if there are differences between main and the new branch
          if git diff --quiet origin/main HEAD; then
            echo "DIFF_EXISTS=false" >> $GITHUB_ENV
            echo "‚ÑπÔ∏è No hay diferencias entre main y pre_prod. No se necesita crear PR."
          else
            echo "DIFF_EXISTS=true" >> $GITHUB_ENV
            git push origin ${{ env.PR_BRANCH }}
            echo "‚úÖ Se encontraron diferencias entre main y pre_prod. Creando PR..."
          fi

      - name: Create pull request
        if: env.DIFF_EXISTS == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          base: main
          branch: ${{ env.PR_BRANCH }}
          delete-branch: true
          title: "üîÑ Merge pre_prod into main"
          body: |
            ## üìã Descripci√≥n
            Pull Request autom√°tico para mergear cambios de la rama `pre_prod` a `main`.
            
            ## üîÑ Cambios incluidos
            Este PR incluye todos los cambios que est√°n en `pre_prod` y no est√°n en `main`.
            
            ## ‚úÖ Checklist
            - [ ] Revisar los cambios incluidos
            - [ ] Verificar que no hay conflictos
            - [ ] Aprobar el merge si todo est√° correcto
            
            ---
            *PR generado autom√°ticamente por GitHub Actions*
          reviewers: ${{ github.actor }}
          labels: |
            automated-pr
            pre-prod-to-main
            merge

      - name: Clean up if no PR needed
        if: env.DIFF_EXISTS == 'false'
        run: |
          git push origin --delete ${{ env.PR_BRANCH }} || true
          echo "‚ÑπÔ∏è No se cre√≥ Pull Request porque no hay diferencias entre main y pre_prod."
          echo "‚úÖ El repositorio $REPO_NAME est√° actualizado." 