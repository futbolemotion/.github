name: üîÑ Create PR pre_prod to main

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: "Selecciona el repositorio para crear PR (pre_prod ‚Üí main)"
        required: true
        type: choice
        options:
          - zend-library
          - zend-src
          - basket-zend-src
          - running-zend-src
          - front-land-bundle
          - back-land-bundle
          - atland
          - atland-vendor
          - superadmin
          # Agrega los repos de la organizaci√≥n aqu√≠

jobs:
  create-pr-job:
    name: Create PR pre_prod ‚Üí main
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ github.event.inputs.repositories }}
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          fetch-depth: 0

      - name: Check branches and differences
        id: check_diff
        run: |
          # Verificar que existan las ramas
          if ! git ls-remote --heads origin main | grep -q 'main'; then
            echo "‚ùå La rama 'main' no existe en el repositorio"
            exit 1
          fi
          
          if ! git ls-remote --heads origin pre_prod | grep -q 'pre_prod'; then
            echo "‚ùå La rama 'pre_prod' no existe en el repositorio"
            exit 1
          fi
          
          # Obtener el n√∫mero de commits diferentes
          git fetch origin main pre_prod
          COMMIT_COUNT=$(git rev-list --count origin/main..origin/pre_prod)
          
          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "No hay cambios para mergear de pre_prod a main"
            echo "CHANGES_EXIST=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "CHANGES_EXIST=true" >> $GITHUB_ENV
          echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV

      - name: Create Pull Request
        if: env.CHANGES_EXIST == 'true'
        run: |
          # Crear el PR usando la API de GitHub directamente
          PR_BODY="## üìã Descripci√≥n\nPull Request autom√°tico para mergear cambios de la rama \`pre_prod\` a \`main\`.\n\n## üîÑ Cambios incluidos\nEste PR incluye ${{ env.COMMIT_COUNT }} commits que est√°n en \`pre_prod\` y no est√°n en \`main\`.\n\n## üßæ Detalles t√©cnicos\n- Rama origen: \`pre_prod\`\n- Rama destino: \`main\`\n- N√∫mero de commits: ${{ env.COMMIT_COUNT }}\n\n## ‚úÖ Checklist\n- [ ] Revisar los cambios incluidos\n- [ ] Verificar que no hay conflictos\n- [ ] Aprobar el merge si todo est√° correcto\n\n---\n*PR generado autom√°ticamente por GitHub Actions*"
          
          PR_DATA=$(cat << EOF
          {
            "title": "üîÑ Merge pre_prod into main (${{ env.COMMIT_COUNT }} commits)",
            "body": "$PR_BODY",
            "head": "pre_prod",
            "base": "main"
          }
          EOF
          )
          
          # Crear el PR
          PR_RESPONSE=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ORG_REPO_UPDATE_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}/pulls \
            -d "$PR_DATA")
          
          # Extraer el n√∫mero del PR
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
          
          if [ "$PR_NUMBER" != "null" ]; then
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            
            # A√±adir labels
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.ORG_REPO_UPDATE_PAT }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}/issues/$PR_NUMBER/labels \
              -d '{"labels":["automated-pr","pre-prod-to-main","merge"]}'
            
            # A√±adir reviewer
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.ORG_REPO_UPDATE_PAT }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}/pulls/$PR_NUMBER/requested_reviewers \
              -d "{\"reviewers\":[\"${{ github.actor }}\"]}"
            
            echo "‚úÖ Pull Request #$PR_NUMBER creado exitosamente"
          else
            echo "‚ùå Error al crear el Pull Request"
            echo "$PR_RESPONSE"
            exit 1
          fi

      - name: PR Creation Status
        run: |
          if [ "${{ env.CHANGES_EXIST }}" == "true" ]; then
            if [ -n "${{ env.PR_NUMBER }}" ]; then
              echo "‚úÖ Pull Request #${{ env.PR_NUMBER }} creado exitosamente de pre_prod a main"
              echo "N√∫mero de commits incluidos: ${{ env.COMMIT_COUNT }}"
            else
              echo "‚ùå Error al crear el Pull Request"
            fi
          else
            echo "‚ÑπÔ∏è No hay cambios para mergear de pre_prod a main"
          fi 