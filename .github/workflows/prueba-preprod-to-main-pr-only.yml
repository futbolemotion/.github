name: üîÑ Create PR pre_prod to main

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: "Selecciona el repositorio para crear PR (pre_prod ‚Üí main)"
        required: true
        type: choice
        options:
          - zend-library
          - zend-src
          - basket-zend-src
          - running-zend-src
          - front-land-bundle
          - back-land-bundle
          - atland
          - atland-vendor
          - superadmin
          # Agrega los repos de la organizaci√≥n aqu√≠

jobs:
  create-pr-job:
    name: Create PR pre_prod ‚Üí main
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Set variables
        id: vars
        run: |
          echo "REPO_NAME=${{ github.event.inputs.repositories }}" >> $GITHUB_ENV
          echo "CLONE_URL=https://x-access-token:${{ secrets.ORG_REPO_UPDATE_PAT }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}.git" >> $GITHUB_ENV
          echo "PR_BRANCH=temp-preprod-to-main/$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ github.event.inputs.repositories }}
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if branches exist and prepare
        run: |
          # Verificar que existan las ramas
          MAIN_EXISTS=$(git ls-remote --heads origin main | wc -l)
          PREPROD_EXISTS=$(git ls-remote --heads origin pre_prod | wc -l)
          
          if [ "$MAIN_EXISTS" -eq 0 ]; then
            echo "‚ùå La rama 'main' no existe en el repositorio $REPO_NAME. Saliendo."
            exit 1
          fi
          
          if [ "$PREPROD_EXISTS" -eq 0 ]; then
            echo "‚ùå La rama 'pre_prod' no existe en el repositorio $REPO_NAME. Saliendo."
            exit 1
          fi
          
          echo "‚úÖ Ambas ramas existen en el repositorio $REPO_NAME."
          
          # Asegurar que tenemos todas las ramas y commits
          git fetch --all --prune
          
          # Verificar si hay commits para mergear
          COMMIT_COUNT=$(git rev-list --count origin/main..origin/pre_prod)
          echo "N√∫mero de commits diferentes entre main y pre_prod: $COMMIT_COUNT"
          
          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "DIFF_EXISTS=false" >> $GITHUB_ENV
            echo "‚ÑπÔ∏è No hay diferencias entre main y pre_prod. No se necesita crear PR."
          else
            echo "DIFF_EXISTS=true" >> $GITHUB_ENV
            echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
            echo "‚úÖ Se encontraron $COMMIT_COUNT commits para mergear de pre_prod a main."
          fi

      - name: Create and prepare temporary branch
        if: env.DIFF_EXISTS == 'true'
        run: |
          # Crear rama temporal desde pre_prod
          git fetch origin pre_prod:refs/remotes/origin/pre_prod
          git checkout -b ${{ env.PR_BRANCH }} origin/pre_prod
          
          # Verificar el estado actual
          echo "Estado actual de la rama temporal:"
          git status
          
          # Asegurar que tenemos todos los cambios
          git pull origin pre_prod --no-rebase
          
          # Verificar que tenemos los commits correctos
          TEMP_COMMITS=$(git rev-list --count origin/main..${{ env.PR_BRANCH }})
          echo "Commits en la rama temporal despu√©s del pull: $TEMP_COMMITS"
          
          if [ "$TEMP_COMMITS" -eq "${{ env.COMMIT_COUNT }}" ]; then
            echo "‚úÖ Rama temporal sincronizada correctamente con pre_prod"
            git push origin ${{ env.PR_BRANCH }}
          else
            echo "‚ùå Error: La rama temporal no tiene todos los commits necesarios"
            echo "Esperados: ${{ env.COMMIT_COUNT }}, Actuales: $TEMP_COMMITS"
            exit 1
          fi

      - name: Create pull request
        if: env.DIFF_EXISTS == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          base: main
          branch: ${{ env.PR_BRANCH }}
          delete-branch: false
          title: "üîÑ Merge pre_prod into main (${{ env.COMMIT_COUNT }} commits)"
          body: |
            ## üìã Descripci√≥n
            Pull Request autom√°tico para mergear cambios de la rama `pre_prod` a `main`.
            
            ## üîÑ Cambios incluidos
            Este PR incluye ${{ env.COMMIT_COUNT }} commits que est√°n en `pre_prod` y no est√°n en `main`.
            
            ## üßæ Detalles t√©cnicos
            - Rama base: `main`
            - Rama origen: `pre_prod`
            - Rama temporal: `${{ env.PR_BRANCH }}`
            - N√∫mero de commits a mergear: ${{ env.COMMIT_COUNT }}
            
            ## ‚úÖ Checklist
            - [ ] Revisar los cambios incluidos
            - [ ] Verificar que no hay conflictos
            - [ ] Aprobar el merge si todo est√° correcto
            
            ---
            *PR generado autom√°ticamente por GitHub Actions*
          reviewers: ${{ github.actor }}
          labels: |
            automated-pr
            pre-prod-to-main
            merge

      - name: Verify pull request creation
        if: env.DIFF_EXISTS == 'true'
        run: |
          echo "‚úÖ Pull Request creado exitosamente desde la rama ${{ env.PR_BRANCH }} a main"
          echo "N√∫mero de commits incluidos: ${{ env.COMMIT_COUNT }}"
          echo "La rama temporal permanecer√° hasta que el PR sea mergeado"

      - name: No changes needed
        if: env.DIFF_EXISTS == 'false'
        run: |
          echo "‚ÑπÔ∏è No se cre√≥ Pull Request porque no hay diferencias entre main y pre_prod."
          echo "‚úÖ El repositorio $REPO_NAME est√° actualizado." 