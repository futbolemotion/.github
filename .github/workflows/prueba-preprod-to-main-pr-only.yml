name: üîÑ Create PR pre_prod to main

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: "Selecciona el repositorio para crear PR (pre_prod ‚Üí main)"
        required: true
        type: choice
        options:
          - zend-library
          - zend-src
          - basket-zend-src
          - running-zend-src
          - front-land-bundle
          - back-land-bundle
          - atland
          - atland-vendor
          - superadmin
          # Agrega los repos de la organizaci√≥n aqu√≠

jobs:
  create-pr-job:
    name: Create PR pre_prod ‚Üí main
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Set variables
        id: vars
        run: |
          echo "REPO_NAME=${{ github.event.inputs.repositories }}" >> $GITHUB_ENV
          echo "CLONE_URL=https://x-access-token:${{ secrets.ORG_REPO_UPDATE_PAT }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}.git" >> $GITHUB_ENV
          echo "PR_BRANCH=temp-preprod-to-main/$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ github.event.inputs.repositories }}
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Configurar el token para operaciones Git
          git remote set-url origin https://x-access-token:${{ secrets.ORG_REPO_UPDATE_PAT }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repositories }}.git

      - name: Check branches and differences
        id: check_branches
        run: |
          # Asegurar que tenemos la informaci√≥n m√°s reciente
          git fetch --all --prune
          
          # Verificar que existan las ramas
          if ! git ls-remote --heads origin main | grep -q 'main'; then
            echo "‚ùå La rama 'main' no existe en el repositorio $REPO_NAME"
            exit 1
          fi
          
          if ! git ls-remote --heads origin pre_prod | grep -q 'pre_prod'; then
            echo "‚ùå La rama 'pre_prod' no existe en el repositorio $REPO_NAME"
            exit 1
          fi
          
          # Obtener el √∫ltimo commit de pre_prod
          PREPROD_SHA=$(git ls-remote origin pre_prod | cut -f1)
          echo "PREPROD_SHA=$PREPROD_SHA" >> $GITHUB_ENV
          
          # Obtener el √∫ltimo commit de main
          MAIN_SHA=$(git ls-remote origin main | cut -f1)
          echo "MAIN_SHA=$MAIN_SHA" >> $GITHUB_ENV
          
          # Verificar si hay diferencias
          if git rev-list --count $MAIN_SHA..$PREPROD_SHA > /dev/null 2>&1; then
            COMMIT_COUNT=$(git rev-list --count $MAIN_SHA..$PREPROD_SHA)
            if [ "$COMMIT_COUNT" -gt 0 ]; then
              echo "DIFF_EXISTS=true" >> $GITHUB_ENV
              echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
              echo "‚úÖ Se encontraron $COMMIT_COUNT commits para mergear de pre_prod a main"
            else
              echo "DIFF_EXISTS=false" >> $GITHUB_ENV
              echo "‚ÑπÔ∏è No hay diferencias entre main y pre_prod"
            fi
          else
            echo "‚ùå Error al comparar ramas"
            exit 1
          fi

      - name: Create temporary branch and copy changes
        if: env.DIFF_EXISTS == 'true'
        run: |
          # Crear rama temporal desde el √∫ltimo commit de pre_prod
          git checkout -b ${{ env.PR_BRANCH }} ${{ env.PREPROD_SHA }}
          
          # Verificar que estamos en el commit correcto
          CURRENT_SHA=$(git rev-parse HEAD)
          if [ "$CURRENT_SHA" != "${{ env.PREPROD_SHA }}" ]; then
            echo "‚ùå Error: La rama temporal no est√° en el commit correcto de pre_prod"
            echo "Esperado: ${{ env.PREPROD_SHA }}"
            echo "Actual: $CURRENT_SHA"
            exit 1
          fi
          
          # Empujar la rama temporal
          git push origin ${{ env.PR_BRANCH }}
          
          # Verificar que la rama se cre√≥ correctamente
          if ! git ls-remote --heads origin ${{ env.PR_BRANCH }} | grep -q "${{ env.PR_BRANCH }}"; then
            echo "‚ùå Error: No se pudo crear la rama temporal"
            exit 1
          fi
          
          # Verificar el n√∫mero de commits
          BRANCH_COMMITS=$(git rev-list --count ${{ env.MAIN_SHA }}..${{ env.PR_BRANCH }})
          if [ "$BRANCH_COMMITS" -ne "${{ env.COMMIT_COUNT }}" ]; then
            echo "‚ùå Error: N√∫mero incorrecto de commits en la rama temporal"
            echo "Esperados: ${{ env.COMMIT_COUNT }}"
            echo "Actuales: $BRANCH_COMMITS"
            exit 1
          fi
          
          echo "‚úÖ Rama temporal creada y verificada correctamente"

      - name: Create pull request
        if: env.DIFF_EXISTS == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          base: main
          branch: ${{ env.PR_BRANCH }}
          delete-branch: false
          title: "üîÑ Merge pre_prod into main (${{ env.COMMIT_COUNT }} commits)"
          body: |
            ## üìã Descripci√≥n
            Pull Request autom√°tico para mergear cambios de la rama `pre_prod` a `main`.
            
            ## üîÑ Cambios incluidos
            Este PR incluye ${{ env.COMMIT_COUNT }} commits que est√°n en `pre_prod` y no est√°n en `main`.
            
            ## üßæ Detalles t√©cnicos
            - Rama base: `main`
            - Rama origen: `pre_prod`
            - Rama temporal: `${{ env.PR_BRANCH }}`
            - SHA pre_prod: `${{ env.PREPROD_SHA }}`
            - SHA main: `${{ env.MAIN_SHA }}`
            - N√∫mero de commits: ${{ env.COMMIT_COUNT }}
            
            ## ‚úÖ Checklist
            - [ ] Revisar los cambios incluidos
            - [ ] Verificar que no hay conflictos
            - [ ] Aprobar el merge si todo est√° correcto
            
            ---
            *PR generado autom√°ticamente por GitHub Actions*
          reviewers: ${{ github.actor }}
          labels: |
            automated-pr
            pre-prod-to-main
            merge

      - name: Verify pull request creation
        if: env.DIFF_EXISTS == 'true'
        run: |
          echo "‚úÖ Pull Request creado exitosamente"
          echo "Rama temporal: ${{ env.PR_BRANCH }}"
          echo "Commits incluidos: ${{ env.COMMIT_COUNT }}"
          echo "SHA pre_prod: ${{ env.PREPROD_SHA }}"
          echo "SHA main: ${{ env.MAIN_SHA }}"

      - name: No changes needed
        if: env.DIFF_EXISTS == 'false'
        run: |
          echo "‚ÑπÔ∏è No se cre√≥ Pull Request porque no hay diferencias entre main y pre_prod."
          echo "‚úÖ El repositorio $REPO_NAME est√° actualizado." 