# .github/workflows/merge_main_to_pre_prod_reusable.yml
name: üî© Reusable Merge Main to Pre-Prod

on:
  workflow_call:
    inputs:
      target_repo:
        description: "The repository to perform the merge on (e.g., your-org/repo-name)"
        required: true
        type: string
      target_branch:
        description: "The branch to merge into (default: pre_prod)"
        required: false
        type: string
        default: "pre_prod"
      source_branch:
        description: "The branch to merge from (default: main)"
        required: false
        type: string
        default: "main"
    secrets:
      ORG_REPO_UPDATE_PAT:
        description: "Personal Access Token with repo scope for updating repositories."
        required: true

jobs:
  merge_branches:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.ORG_REPO_UPDATE_PAT }} # Usar el secreto pasado al workflow reusable

    steps:
      - name: Set up Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Define Repository Variables
        id: repo_vars
        run: |
          REPO_FULL_NAME="${{ inputs.target_repo }}"
          REPO_NAME=$(basename "$REPO_FULL_NAME")
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "REPO_FULL_NAME=$REPO_FULL_NAME" >> $GITHUB_OUTPUT
          echo "SOURCE_BRANCH=${{ inputs.source_branch }}" >> $GITHUB_OUTPUT
          echo "TARGET_BRANCH=${{ inputs.target_branch }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Clone Target Repository
        run: |
          echo "Cloning ${{ steps.repo_vars.outputs.REPO_FULL_NAME }}..."
          if ! git clone "https://oauth2:${{ env.GITHUB_TOKEN }}@github.com/${{ steps.repo_vars.outputs.REPO_FULL_NAME }}.git" "${{ steps.repo_vars.outputs.REPO_NAME }}"; then
            echo "::error::Failed to clone ${{ steps.repo_vars.outputs.REPO_FULL_NAME }}. Check token permissions or repo existence."
            exit 1
          fi
          cd "${{ steps.repo_vars.outputs.REPO_NAME }}"
        shell: bash

      - name: Perform Merge Operation
        working-directory: ${{ steps.repo_vars.outputs.REPO_NAME }}
        run: |
          SOURCE_BRANCH="${{ steps.repo_vars.outputs.SOURCE_BRANCH }}"
          TARGET_BRANCH="${{ steps.repo_vars.outputs.TARGET_BRANCH }}"
          REPO_FULL_NAME="${{ steps.repo_vars.outputs.REPO_FULL_NAME }}"

          # Verificar si la rama target existe
          if ! git show-ref --verify --quiet refs/heads/"$TARGET_BRANCH"; then
            echo "::warning::Branch '$TARGET_BRANCH' does not exist in $REPO_FULL_NAME. Skipping this repository."
            exit 0 # Exit gracefully if target branch doesn't exist
          fi

          # Hacer checkout a la rama target
          echo "Checking out $TARGET_BRANCH branch..."
          if ! git checkout "$TARGET_BRANCH"; then
            echo "::error::Failed to checkout $TARGET_BRANCH in $REPO_FULL_NAME."
            exit 1
          fi

          # Pull de la rama target para asegurar que est√° actualizada
          echo "Pulling latest $TARGET_BRANCH..."
          if ! git pull origin "$TARGET_BRANCH"; then
            echo "::error::Failed to pull $TARGET_BRANCH in $REPO_FULL_NAME."
            exit 1
          fi

          # Pull de la rama source
          echo "Pulling latest $SOURCE_BRANCH..."
          if ! git pull origin "$SOURCE_BRANCH"; then
            echo "::error::Failed to pull $SOURCE_BRANCH in $REPO_FULL_NAME."
            exit 1
          fi

          # Intentar merge de source a target
          echo "Attempting to merge $SOURCE_BRANCH into $TARGET_BRANCH..."
          if git merge "$SOURCE_BRANCH" --no-ff -m "Merge $SOURCE_BRANCH into $TARGET_BRANCH (automated by workflow)"; then
            echo "Merge successful. Pushing to origin/$TARGET_BRANCH..."
            if ! git push origin "$TARGET_BRANCH"; then
              echo "::error::Failed to push $TARGET_BRANCH to origin in $REPO_FULL_NAME. Manual intervention might be required."
              exit 1
            else
              echo "Successfully merged and pushed $SOURCE_BRANCH to $TARGET_BRANCH in $REPO_FULL_NAME."
            fi
          else
            echo "::error::Merge conflicts detected or merge failed in $REPO_FULL_NAME. Manual intervention required. Please resolve conflicts locally and push."
            git merge --abort # Abort the merge attempt
            exit 1 # Fail the job if merge conflicts
          fi
        shell: bash
