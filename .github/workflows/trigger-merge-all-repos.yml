# .github/workflows/trigger_merge_all_repos.yml
name: üíø Trigger Merge Main to Pre-Prod for All Repos

on:
  schedule:
    - cron: '0 8 * * *' # Todos los d√≠as a las 8am UTC
  workflow_dispatch:
    inputs:
      repos_to_update:
        description: 'Comma-separated list of specific repositories to update (e.g., repo-a,repo-b). Leave empty for all listed below.'
        required: false
        default: ''
      skip_confirmation:
        description: 'Check to skip manual confirmation for large operations. Use with caution!'
        type: boolean
        default: false

jobs:
  merge_all_repos:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.all_repos_list.outputs.repos }}
    steps:
      - name: Define All Repositories
        id: all_repos_list
        run: |
          ALL_ORG_REPOS=(
            "futbolemotion/running-zend-src"
            # Agrega aqu√≠ los otros 37 repositorios, uno por l√≠nea
          )
          REPOS_ARRAY=()
          if [ -n "${{ github.event.inputs.repos_to_update }}" ]; then
            IFS=',' read -ra SELECTED_INPUT_REPOS <<< "${{ github.event.inputs.repos_to_update }}"
            for selected_repo_short_name in "${SELECTED_INPUT_REPOS[@]}"; do
              REPO_MATCH_FOUND=false
              for full_repo_name in "${ALL_ORG_REPOS[@]}"; do
                if [[ "$full_repo_name" == *"/${selected_repo_short_name}" ]]; then
                  REPOS_ARRAY+=("$full_repo_name")
                  REPO_MATCH_FOUND=true
                  break
                fi
              done
              if [ "$REPO_MATCH_FOUND" = false ]; then
                echo "::warning::Repository '$selected_repo_short_name' not found in the predefined list. Skipping."
              fi
            done
          else
            REPOS_ARRAY=("${ALL_ORG_REPOS[@]}")
          fi
          printf '%s\n' "${REPOS_ARRAY[@]}" > repos_to_merge.txt
          echo "repos=$(jq -R -s -c 'split("\n")[:-1]' repos_to_merge.txt)" >> $GITHUB_OUTPUT

  merge_main_to_pre_prod:
    needs: merge_all_repos
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository: ${{ fromJson(needs.merge_all_repos.outputs.repos) }}
    steps:
      - name: Llamar workflow reusable para merge main -> pre_prod
        uses: ./.github/workflows/merge-main-to-pre-prod-reusable.yml
        with:
          target_repo: ${{ matrix.repository }}
          source_branch: 'main'
          target_branch: 'pre_prod'
        secrets:
          ORG_REPO_UPDATE_PAT: ${{ secrets.ORG_REPO_UPDATE_PAT }}

# El job merge_main_to_pre_prod ahora llama al workflow reusable que ya maneja merge directo y PR autom√°tico en caso de conflicto.