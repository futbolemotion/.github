name: ⚙️ Merge main to pre_prod in selected repos

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: "Selecciona el repositorio a actualizar (main → pre_prod)"
        required: true
        type: choice
        options:
          - zend-library
          - zend-src
          - basket-zend-src
          - running-zend-src
          - front-land-bundle
          - back-land-bundle
          - atland
          - atland-vendor
          - superadmin
          # Agrega los repos de la organización aquí
  
  # Si el PR es mergeado a main, se ejecuta el workflow
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  merge-job:
    name: Merge main → pre_prod
    runs-on: ubuntu-latest
    # Solo ejecutar si el PR fue mergeado a main o si es ejecución manual
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       github.event.pull_request.base.ref == 'main')

    steps:
      - name: Set variables
        id: vars
        run: |
          # Si es ejecución manual, usar el repositorio seleccionado
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "REPO_NAME=${{ github.event.inputs.repositories }}" >> $GITHUB_ENV
          else
            # Si es ejecución automática, usar el repositorio actual
            echo "REPO_NAME=${{ github.repository_name }}" >> $GITHUB_ENV
          fi
          echo "CLONE_URL=https://x-access-token:${{ secrets.ORG_REPO_UPDATE_PAT }}@github.com/${{ github.repository_owner }}/$REPO_NAME.git" >> $GITHUB_ENV

      - name: Check if pre_prod branch exists
        run: |
          BRANCH_EXISTS=$(git ls-remote --heads "$CLONE_URL" pre_prod | wc -l)
          if [ "$BRANCH_EXISTS" -eq 0 ]; then
            echo "❌ La rama 'pre_prod' no existe en el repositorio $REPO_NAME. Saliendo."
            exit 1
          fi

      - name: Clone repository and try merge
        id: merge_attempt
        run: |
          set -e
          git clone --branch pre_prod "$CLONE_URL" repo
          cd repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin main
          if git merge origin/main --no-ff --no-edit; then
            echo "MERGE_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "MERGE_SUCCESS=false" >> $GITHUB_ENV
          fi

      - name: Push to pre_prod if merge succeeded
        if: env.MERGE_SUCCESS == 'true'
        run: |
          cd repo
          git push origin pre_prod
          echo "✅ Merge completado y enviado a pre_prod."

      - name: Create pull request if merge failed
        if: env.MERGE_SUCCESS == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.ORG_REPO_UPDATE_PAT }}
          repository: ${{ github.repository_owner }}/${{ env.REPO_NAME }}
          base: pre_prod
          branch: main
          title: "🔀 Merge main into pre_prod (automated PR)"
          body: |
            El merge automático de `main` a `pre_prod` falló por conflicto.
            Este Pull Request fue generado automáticamente para facilitar la revisión y resolución manual.
            
            **Trigger:** ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automático (PR mergeado a main)' }}
            **Repositorio:** ${{ env.REPO_NAME }}

      - name: Generate Job Summary
        if: always()
        run: |
          echo "## 📊 Resumen del Workflow - Merge main → pre_prod" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Información del trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "### 🎯 Información de Ejecución" >> $GITHUB_STEP_SUMMARY
            echo "- **Tipo de ejecución:** Manual" >> $GITHUB_STEP_SUMMARY
            echo "- **Repositorio seleccionado:** \`${{ env.REPO_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Ejecutado por:** \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🎯 Información de Ejecución" >> $GITHUB_STEP_SUMMARY
            echo "- **Tipo de ejecución:** Automático" >> $GITHUB_STEP_SUMMARY
            echo "- **Trigger:** PR mergeado a main" >> $GITHUB_STEP_SUMMARY
            echo "- **Repositorio:** \`${{ env.REPO_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **PR:** [#${{ github.event.pull_request.number }}](https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}/pull/${{ github.event.pull_request.number }})" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Fecha de ejecución:** \`$(date '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Estado del merge
          if [ "${{ env.MERGE_SUCCESS }}" == "true" ]; then
            echo "### ✅ Resultado del Merge" >> $GITHUB_STEP_SUMMARY
            echo "✅ **ÉXITO** - Merge completado y enviado a pre_prod" >> $GITHUB_STEP_SUMMARY
            echo "- **Rama origen:** \`main\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Rama destino:** \`pre_prod\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Resultado del Merge" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **CONFLICTO** - Se creó un Pull Request para resolución manual" >> $GITHUB_STEP_SUMMARY
            echo "- **Rama origen:** \`main\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Rama destino:** \`pre_prod\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Acción:** Revisar y resolver conflictos en el PR generado" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Enlaces Útiles" >> $GITHUB_STEP_SUMMARY
          echo "- [Repositorio](https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Comparar cambios](https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}/compare/pre_prod...main)" >> $GITHUB_STEP_SUMMARY